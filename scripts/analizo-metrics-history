#!/usr/bin/ruby
# metrics-history
# Generates the metrics of the whole history of an application.
# Antônio Terceiro (terceiro@dcc.ufba.br)
# Luiz Romário Santana Rios (luizromario@gmail.com)
# 
# Usage: metrics-history repository-url
#        metrics-history -f repository-folder
#
require 'rubygems'
require 'grit'
require 'yaml'
require 'benchmark'
require 'fileutils'

FILTER = /\.(c|h|cpp|cxx|cc|hpp|java)$/

class Grit::Commit
  def merge?
    self.parents.size > 1
  end
  def parentless
    self.parents.size == 0
  end
  def wanted?
    files = `git show --pretty=format: --name-only #{id}`.split
    matches = (files.any? { |path| path =~ FILTER })
    !merge? && matches 
  end
  def previous_wanted
    if merge? || parentless
      nil
    else
      previous = self.parents.first
      if previous.wanted?
        previous
      else
        previous.previous_wanted
      end
    end
  end
  def wanted_list
    commit = self.wanted? ? self : self.previous_wanted
    if commit
      result = []
      while commit
        result << commit
        commit = commit.previous_wanted
      end
      result
    else
      []
    end
  end
end

class AnalizoRunner
  def self.metrics(commit)
    system "git checkout #{commit} > /dev/null 2>> git.log"
    if "" == yaml_metrics = `analizo-metrics . 2> /dev/null` then
      false
    else
      YAML.load_stream(yaml_metrics).documents
    end
  end
  def self.metricsCSV(commit)
    metr = metrics(commit)
    if metr then
      csv_string = ""
      csv_string << commit.id; csv_string << ","
      if pa = commit.previous_wanted then
        csv_string << commit.previous_wanted.id
      end
      csv_string << ","
      csv_string << commit.author.name.inspect; csv_string << ","
      csv_string << commit.author.email; csv_string << ","

      csv_string << metr[0].keys.sort.map{|key| metr[0][key]}.join(','); csv_string << ","
      csv_string << `git show --pretty=format: --name-only #{commit.id}`.split.join(',').inspect; csv_string << ","
      csv_string << commit.authored_date.rfc2822.inspect
    end
  end
end

class Message
  class Commit
    def self.count(c)
      if c == 0 then
	puts "No relevant commits to process."
      else
	print "Processing " 
	if c == 1 then
	  puts "one commit"
	else
	  puts "#{c} commits"
	end
      end
    end
    def self.failed
      print "E"
    end
    def self.passed
      print "."
    end
  end
  def self.done
    puts "Done."
  end
  def self.downloading
    puts "Downloading the project..."
  end
  def self.error_count(c)
    if c == 0 then
      puts "\nDone.\n"
    else
      if c == 1 then
        print "\nOne error"
      else
        print "\n#{c} errors"
      end
      puts " ocurred. Check analizo.log and doxyparse.log for more details.\n"
    end
  end
  def self.info(msg)
    puts msg
  end
  def self.fatal(msg)
    puts "fatal: #{msg}"
    exit
  end
  def self.not_implemented(feature = "feature")
    print "Sorry, #{feature} not implemented yet."
  end
  def self.usage
    puts "Usage:\n   #{$PROGRAM_NAME} repository-url\n   #{$PROGRAM_NAME} -f repository-folder\n   Command-line options:\n     -s or --svn : The url passed is a Subversion repository.\n     -k or --keeptmp : Keep the temporary folder used to take the metrics (recommended for --svn)."
    exit
  end
  def self.warning(msg)
    puts "Warning: #{msg}"
  end
end

class Options < Hash
  def initialize(args = [])
    parse_by_command_line_args(args)
  end
  def parse_by_command_line_args(args)
    version_control_systems = [
      # [long_option, short_option]
        ["--svn", "-s"],
        ["--cvs", "-c"]
      ]
    args.each_index do |i|
      if (ai = args[i])[0..0] != "-" and args[i-1] != "-f" and !self.has_key?(:folder) and !self.has_key?(:url)
        self[:url] = args[i]
      elsif ("-f" == ai or "--folder" == ai) and !self.has_key?(:folder)  and !self.has_key?(:url)
        self[:folder] = args[i+1]
      elsif "-k" == ai or "--keeptmp" == ai
        self[:keep_temporary_folder] = true
      else
        version_control_systems.each do |vcs|
          if (ai == vcs[0] or ai == vcs[1]) and !self.has_key?(:version_control)
            self[:version_control] = vcs[0][2..-1]
          end
        end
      end
    end
  end
end

class VersionControl
  def self.clone(url, version_control = nil)
    if "svn" == version_control
      Message.warning "Converting from svn. This may take a long time."
      `git svn clone #{url}`
    else
      `git clone #{url}`
    end
  end
end

options = Options.new(ARGV)
supported_version_control_systems = [
  "svn"
]

if (options.has_key?(:folder) and options.has_key?(:url)) or (!options.has_key?(:folder) and !options.has_key?(:url))
  Message.usage
end

# Check for inconsistancies
if options.has_key?(:version_control)
  if !supported_version_control_systems.include?(o_vc = options[:version_control])
    Message.not_implemented "#{o_vc} support"
  elsif options.has_key? :folder
    Message.not_implemented "#{o_vc} history from folders"
  end
end

previous_dir = Dir.pwd
Dir.chdir("/tmp")
begin
  if options.has_key?(:url)
    Message.downloading
    if "" != git_dir = VersionControl.clone(options[:url], options[:version_control]).split("\n")[0]
      tree = Grit::Repo.new(git_dir = git_dir.split[5]+"..").commits.first
    else
      exit
    end
    proj_name = git_dir.split("/")[-3]
    Message.done
  elsif options.has_key?(:folder)
    proj_name = Dir.chdir(git_dir = previous_dir+"/"+options[:folder]) do
      Dir.pwd.split("/")[-1]
    end
    FileUtils.cp_r git_dir, "/tmp/#{proj_name}"
    tree = Grit::Repo.new(git_dir = "/tmp/#{proj_name}").commits.first
  end
rescue Grit::InvalidGitRepositoryError
  Message.fatal("Not a git repository.")
rescue Grit::NoSuchPathError
  Message.fatal("The temporary folder couldn't be created.")
end
Dir.chdir(git_dir) do
  system "echo \"Log opened at: #{Time.now}\" >> git.log"
  system "echo \"Log opened at: #{Time.now}\" >> analizo.log"
  system "echo \"Log opened at: #{Time.now}\" >> doxyparse.log"
  system "git checkout master > /dev/null 2>> git.log"

  File.open(previous_dir+"/#{time_start_str = Time.now.strftime('%Y%m%d%H%M%S')}-#{proj_name}-metrics.csv", 'w') do |file|
    file.puts "commit_id,nearest_changed_ancestral_id,author,e-mail,average_cbo,average_lcom4,cof,sum_classes,sum_nom,sum_npm,sum_npv,sum_tloc,changed_files,date\n"
    wl = tree.wanted_list
    Message::Commit.count(wl.size)
    error_counter = 0
    wl.each do |commit|
      if mcsv = AnalizoRunner.metricsCSV(commit) then
        file.puts mcsv
        Message::Commit.passed
      else
        Message::Commit.failed
        system "echo \"Error processing commit #{commit}.\" >> analizo.log 2>> analizo.log"
        system "echo \"Analizo out:\" >> analizo.log 2>> analizo.log"
        system "analizo-metrics . >> analizo.log 2>> analizo.log"
        system "echo \"Error processing commit #{commit}.\" >> doxyparse.log 2>> doxyparse.log"
        system "echo \"Doxyparse out:\" >> doxyparse.log 2>> doxyparse.log"
        system "doxyparse . >> doxyparse.log 2>> doxyparse.log"
        error_counter +=1
      end
    end
    Message.error_count error_counter
    system "git checkout master > /dev/null 2>> git.log"
  end
  system "echo \"Log closed at: #{Time.now}\" >> git.log"
  system "echo \"Log closed at: #{Time.now}\" >> analizo.log"
  system "echo \"Log closed at: #{Time.now}\" >> doxyparse.log"
  Dir.mkdir(logs_dir = previous_dir+"/#{time_start_str}-#{proj_name}-logs")
  FileUtils.cp "git.log", logs_dir
  FileUtils.cp "analizo.log", logs_dir
  FileUtils.cp "doxyparse.log", logs_dir
end
if options[:keep_temporary_folder]
  Message.warning "The temporary folder (/tmp/#{proj_name}) was kept."
else
  FileUtils.rm_r proj_name, :force => true
end
